<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Unwind" Id="{93b6d370-9060-40d7-8101-95f7e4ba6901}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Unwind EXTENDS FB_PackML_BaseModule
VAR
    // Sub module definitions here

    // List of sub modules
    ipSubModules_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_SUBMODULES] OF I_PackML_BaseModule := [];

    // Component definitions here
    Axis   : FB_Component_BasicAxis := (Name := 'Axis');
    Sensor : FB_DigitalSensor       := (Name := 'Sensor');

    // List of Components
    ipComponents_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_COMPONENTS] OF I_ComponentBase := [Axis, Sensor];

    //Alarms for this module
    UnwindAlarms : ARRAY[1..UNWIND_ALARM_COUNT] OF FB_TcAlarm;

    //Data for recipe
    Recipe : ST_UnwindRecipe;

    (*Parameters from PackTags for module
    //_Param  : ARRAY[1..10] OF ST_Descriptor2;*)
    _Report : ARRAY[1..10] OF ST_Descriptor2;

    //HMI Control for EM
    fbControlSourceHMI : FB_ControlSource_HMI;
END_VAR

VAR CONSTANT
    //reports 
    FAULT : INT := 1;

    //Alarms
    UNWIND_ALARM_COUNT : INT := 5;
END_VAR

//Simulation variables for messaging
VAR
    ErrorInput : BOOL;
    WarnInput  : BOOL;
    InfoInput  : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="I_CyclicFB" Id="{50b2b73b-a7e6-449c-8083-d6eb4b73f60c}" />
    <Folder Name="Methods" Id="{1fe8be3a-f7d7-42ae-b885-2501b85559e1}">
      <Folder Name="Acting States" Id="{694adf4f-f884-4b0e-ba6d-9f953b81f310}" />
      <Folder Name="AlarmHandling" Id="{70e44d7b-4274-40c4-b74d-565592321484}" />
    </Folder>
    <Folder Name="Properties" Id="{9ed10d00-9336-4b92-8254-1686c13962e6}" />
    <Method Name="Aborting" Id="{bdb0d746-aea7-4c8d-aad7-79d5f9fbae03}" FolderPath="Methods\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Aborting
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
    0:
        NoStateTasksToComplete := FALSE;
        SequenceState          := SequenceState + 10;
    10:
        Axis.Stop();
        IF Axis.Stopped THEN
            SequenceState := SequenceState + 10;
        END_IF
    20:
        // Disable here
        Axis.Disable();

        // Check not enabled here
        IF NOT Axis.Enabled THEN
            SequenceState := SequenceState + 10;
        END_IF
    30:
        StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Acceleration" Id="{1c2276ee-9cba-4c99-b7d6-1838f1184aea}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Acceleration : LREAL]]></Declaration>
      <Set Name="Set" Id="{d411bf23-e43c-40ef-b49c-52a8af7b1701}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Recipe.Axis.Acceleration := Acceleration;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Clearing" Id="{f1ec6ac1-684d-4fbb-87f9-9498565943f4}" FolderPath="Methods\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Clearing
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
    0:
        NoStateTasksToComplete := FALSE;
        SequenceState          := SequenceState + 10;
    10:
        //Reset any alarms that get latched
        UnwindAlarms[E_Unwind.StartTimeout].Clear(0, 0);
        SequenceState := SequenceState + 10;
    20:
        // Enable here
        Axis.Enable();

        // Check enabled here
        IF Axis.Enabled THEN
            SequenceState := SequenceState + 10;
        END_IF
    30:
        StateTasksComplete := TRUE;
END_CASE

SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{99ddd031-78aa-46a7-b2f9-f0b68a19d02e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := UnwindAlarms,
                         ClassSize  := SIZEOF(TC_EVENTS.Unwind),
                         pInitEvent := ADR(TC_EVENTS.Unwind.InitReferenceEvent),
                         Prefix     := Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{ea09e275-dd4c-4ec1-a323-7e0cfd7e21cd}" FolderPath="I_CyclicFB\">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

//HMI control for EM
fbControlSourceHMI.CyclicLogic();

//Set the current alarm severity for this module
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := UnwindAlarms, CurrentSeverity := _CurrentAlarmSeverity);
IF _CurrentAlarmSeverity >= TcEventSeverity.Error THEN
    ChangeState(E_PMLCommand.ePMLCommand_Abort);
END_IF

CyclicLogic_Simulation();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic_Simulation" Id="{9b148660-9d4a-4cd8-aff6-f8eb0f885962}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD CyclicLogic_Simulation
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*	
This is just for testing. Real hardware can be setup in other places
Here the alarms will raise and clear on its own if the input changes	
*)

//Generic Alarms for Testing
IF ErrorInput AND NOT UnwindAlarms[E_Unwind.AlarmMessage].bRaised THEN
    RaiseAlarm2Args(UnwindAlarms[E_Unwind.AlarmMessage], '', '');
ELSIF NOT ErrorInput AND UnwindAlarms[E_Unwind.AlarmMessage].bRaised THEN
    UnwindAlarms[E_Unwind.AlarmMessage].Clear(0, 0);
END_IF

IF WarnInput AND NOT UnwindAlarms[E_Unwind.WarnMessage].bRaised THEN
    RaiseAlarm2Args(UnwindAlarms[E_Unwind.WarnMessage], '', '');
ELSIF NOT WarnInput AND UnwindAlarms[E_Unwind.WarnMessage].bRaised THEN
    UnwindAlarms[E_Unwind.WarnMessage].Clear(0, 0);
END_IF

IF InfoInput AND NOT UnwindAlarms[E_Unwind.InfoMessage].bRaised THEN
    RaiseAlarm2Args(UnwindAlarms[E_Unwind.InfoMessage], '', '');
ELSIF NOT InfoInput AND UnwindAlarms[E_Unwind.InfoMessage].bRaised THEN
    UnwindAlarms[E_Unwind.InfoMessage].Clear(0, 0);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{59d1fe7d-28ec-4cbf-a3ef-81f06735b3ba}" FolderPath="Methods\">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
    i                        : UDINT;
    varInfo                  : __SYSTEM.VAR_INFO;
    AllSubUnitsInitialized   : BOOL := TRUE;
    AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
        // Define the interfaces to the different subunits (Must take place before SUPER^.initialize call)
        FOR i := 1 TO SPT_BaseTypes.Parameters_PackML_Base.MAX_NO_OF_SUBMODULES DO
            ipSubModules[i] := ipSubModules_Init[i];
        END_FOR

        FOR i := 1 TO SPT_BaseTypes.Parameters_PackML_Base.MAX_NO_OF_COMPONENTS DO
            ipComponents[i] := ipComponents_Init[i];
        END_FOR

        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here

        (*CustomModes(eMode                          :=,
                    sName                          :=,
                    bDisableClearing               :=,
                    bDisableStarting               :=,
                    bDisableSuspended              :=,
                    bDisableStopping               :=,
                    bDisableAborting               :=,
                    bDisableHolding                :=,
                    bDisableHeld                   :=,
                    bDisableUnholding              :=,
                    bDisableSuspending             :=,
                    bDisableUnsuspending           :=,
                    bDisableResetting              :=,
                    bDisableIdle                   :=,
                    bDisableCompleting             :=,
                    bDisableComplete               :=,
                    bEnableUnitModeChangeStopped   :=,
                    bEnableUnitModeChangeIdle      :=,
                    bEnableUnitModeChangeSuspended :=,
                    bEnableUnitModeChangeExecute   :=,
                    bEnableUnitModeChangeAborted   :=,
                    bEnableUnitModeChangeHeld      :=,
                    bEnableUnitModeChangeComplete  :=,
                    bError                         =>,
                    nErrorId                       =>);*)
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        Initialize_TagData();
		RegisterExternalController(Controller := fbControlSourceHMI);
		fbControlSourceHMI.CyclicLogic();
		
		//Set the Parent Response here
		_ParentFaultResponseDefinitions[TcEventSeverity.Error] := E_AlarmResponse.Hold_Immediate;
        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize_TagData" Id="{cc617178-5960-4d50-b787-6b9fa33e7529}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Initialize_TagData
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Recipe
Recipe.Axis.Velocity     := 100;
Recipe.Axis.Acceleration := 1000;

//Report
_Report[FAULT].ID   := TO_DINT(3 * 10 + 1);
_Report[FAULT].Name := 'Fault ID';
_Report[FAULT].Unit := 'n/a';]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarm2Args" Id="{7b5fcd4f-47a7-4be3-b737-1f985fad3866}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD RaiseAlarm2Args
VAR_IN_OUT
    Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
    String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
    String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm    := Alarm,
                                 String_1 := Name,
                                 String_2 := String_1,
                                 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{df4c4264-8610-42ca-aaef-d7307256e131}" FolderPath="Methods\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Starting
VAR_INPUT
END_VAR

VAR_INST
    StartTimer : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
    //=================================PRODUCTION MODE==================================
    E_PMLUnitMode.ePMLUnitMode_Production:
        CASE SequenceState OF
            0:
                // Delay 1 scan to make sure timer is off.  Not guarnteed from last time where it finished.
                NoStateTasksToComplete := FALSE;
                SequenceState          := SequenceState + 10;
            10:
                NoStateTasksToComplete := FALSE;
                Axis.Velocity          := Recipe.Axis.Velocity;
                Axis.Acceleration      := Recipe.Axis.Acceleration;
                Axis.MoveVelocity(Velocity := Recipe.Axis.Velocity, AbortPrevious := FALSE);
                SequenceState := SequenceState + 10;
            20:
                IF Axis.Busy THEN
                    SequenceState := SequenceState + 10;
                END_IF

                IF StartTimer.Q AND NOT UnwindAlarms[E_Unwind.StartTimeout].bRaised THEN
                    RaiseAlarm2Args(UnwindAlarms[E_Unwind.StartTimeout], '', '');
                    SequenceState := SequenceState + 10;
                END_IF
            30:
                StateTasksComplete := TRUE;
        END_CASE

    //=================================MAINTENANCE & MANUAL MODE==================================
    E_PMLUnitMode.ePMLUnitMode_Maintenance, E_PMLUnitMode.ePMLUnitMode_Manual:
        ;
END_CASE

SUPER^.Starting();
StartTimer(IN := (SequenceState = 10 OR SequenceState = 20), PT := T#3S);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{46484e2e-d13e-46af-afb0-40bd4e855a4b}" FolderPath="Methods\Acting States\">
      <Declaration><![CDATA[METHOD PROTECTED Stopping
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
    //=================================PRODUCTION MODE==================================
    E_PMLUnitMode.ePMLUnitMode_Production:
        CASE SequenceState OF
            0:
                NoStateTasksToComplete := FALSE;
                Axis.Stop();
                SequenceState := SequenceState + 10;
            10:
                IF Axis.Stopped THEN
                    SequenceState := SequenceState + 10;
                END_IF
            20:
                StateTasksComplete := TRUE;
        END_CASE

    //=================================MAINTENANCE & MANUAL MODE==================================
    E_PMLUnitMode.ePMLUnitMode_Maintenance, E_PMLUnitMode.ePMLUnitMode_Manual:
        ;
END_CASE

SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Velocity" Id="{4a353ca3-1dd1-4a51-9960-fbed664b7b4b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Velocity : LREAL]]></Declaration>
      <Set Name="Set" Id="{ad25254f-0304-481d-9e2a-87a66fc50f23}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Recipe.Axis.Velocity := Velocity;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Unwind">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Aborting">
      <LineId Id="214" Count="20" />
      <LineId Id="71" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Acceleration.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Clearing">
      <LineId Id="165" Count="19" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.CreateEvents">
      <LineId Id="74" Count="6" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.CyclicLogic">
      <LineId Id="99" Count="15" />
      <LineId Id="86" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.CyclicLogic_Simulation">
      <LineId Id="81" Count="3" />
      <LineId Id="96" Count="17" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Initialize">
      <LineId Id="617" Count="50" />
      <LineId Id="697" Count="1" />
      <LineId Id="685" Count="2" />
      <LineId Id="668" Count="7" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Initialize_TagData">
      <LineId Id="87" Count="2" />
      <LineId Id="91" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.RaiseAlarm2Args">
      <LineId Id="36" Count="2" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Starting">
      <LineId Id="234" Count="32" />
      <LineId Id="176" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Stopping">
      <LineId Id="107" Count="20" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Velocity.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>